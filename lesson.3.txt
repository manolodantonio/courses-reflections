--When would you want to use a remote repository rather than keeping all your work local?
-to share with other people and have a common repository. Also for cloud backup.

--Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
-So i can decide when to update my public project in a way other people can always use it in a coherent way, not an half-built project.

--Describe the differences between forks, clones, and branches. When would you use one instead of another?
-Clone copies a repository from a source on your local. 
Fork is the same, but on GitHub servers, adding linkback and visibility to the clone. 
Branch is a copy that can be created inside a repository to modify it without afflicting the original.

pushing\pulling labels different from local but in the same brach, makes git create a branch and then merge automatically. 
You can pull and create a branch without merging using fetch

origin/master is a label that indicates your local copy of the remote master tip when you last pulled or pushed.

--What is the benefit of having a copy of the last known state of the remote stored locally?
- You can identify the differencies between your status and the remote status, which can be behind yours or be modified by other users.

--How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
-The only easier option without using git/hub i can think of is a compartimentalized development 
where you are supposed to interact with other compartments in classes-style.

--When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
- Changes in master branch directly impact your code. Separate branches can be used to test and then be merged in the master branch.